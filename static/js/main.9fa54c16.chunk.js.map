{"version":3,"sources":["components/TimeDisplay.js","components/BreakTimer.js","components/SessionTimer.js","App.js","serviceWorker.js","index.js"],"names":["momentDurationFormatSetup","moment","TimeDisplay","started","timeLeft","startStopTime","sessionType","handleReset","timeLabel","duration","format","trim","id","onClick","BreakTimer","breakLength","addMinute","minusMinute","breakInMinutes","asMinutes","SessionTimer","sessionLength","sessionInMinutes","App","beepElement","useRef","useState","setBreakLength","setSessionLength","setSessionType","setTimeLeft","intervalCount","setIntervalCount","useEffect","className","clearInterval","newIntervalCount","setInterval","prevTimeLeft","current","play","load","newSessionLength","newBreakLength","ref","src","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9fa54c16.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\n\nmomentDurationFormatSetup(moment);\n\nconst TimeDisplay = ({started, timeLeft, startStopTime, sessionType, handleReset }) => {\n  const timeLabel = moment.duration(timeLeft, 's').format('mm:ss', {trim: false});\n  return (\n    <div>\n      <p id=\"timer-label\">{sessionType}</p>\n        <p id=\"time-left\">{timeLabel}</p>\n      <button id=\"start_stop\" onClick={startStopTime}>{started? 'Stop': 'Start'}</button>\n      <button id=\"reset\" onClick={handleReset}>Reset</button>\n    </div>\n  );\n};\n\nexport default TimeDisplay;\n","import React from 'react';\nimport moment from \"moment/moment\";\n\nconst BreakTimer = ({breakLength, addMinute, minusMinute}) => {\n  const breakInMinutes = moment.duration(breakLength, 's').asMinutes();\n\n  return (\n    < div >\n      <p id=\"break-label\">Break Length</p>\n      <p id=\"break-length\">{breakInMinutes}</p>\n      <button id=\"break-increment\" onClick={addMinute}>+</button>\n      <button id=\"break-decrement\" onClick={minusMinute}>-</button>\n    </div>\n)\n  ;\n};\n\nexport default BreakTimer;\n","import React from 'react';\nimport moment from \"moment/moment\";\n\nconst SessionTimer = ({addMinute, minusMinute, sessionLength}) => {\n  const sessionInMinutes = moment.duration(sessionLength, 's').asMinutes();\n\n  return (\n    < div >\n      <p id=\"session-label\">Session Length</p>\n        <p id=\"session-length\">{sessionInMinutes}</p>\n        <button id=\"session-increment\" onClick={addMinute}>+</button>\n        <button id=\"session-decrement\" onClick={minusMinute}>-</button>\n    </div>\n)\n  ;\n};\n\nexport default SessionTimer;\n","import React, {useState, useEffect, useRef} from 'react';\nimport './App.css';\n\nimport TimeDisplay from \"./components/TimeDisplay\";\nimport BreakTimer from \"./components/BreakTimer\"\nimport SessionTimer from \"./components/SessionTimer\"\n\nfunction App() {\n  const beepElement = useRef(null);\n  const [breakLength, setBreakLength] = useState(5 * 60);\n  const [sessionLength, setSessionLength] = useState(25 * 60);\n  const [sessionType, setSessionType] = useState('Session');\n  const [timeLeft, setTimeLeft] = useState(sessionLength);\n  const [intervalCount, setIntervalCount] = useState(null);\n\n\n\n  const minusBreakMinute = () => {\n    const newBreakLength = breakLength - 60;\n    if (newBreakLength > 0) {\n      setBreakLength(newBreakLength)\n    }\n\n  };\n\n  const addBreakMinute = () => {\n    const newBreakLength = breakLength + 60;\n    if (newBreakLength <= 60 * 60) {\n      setBreakLength(newBreakLength);\n    }\n  };\n  const minusSessionMinute = () => {\n    const newSessionLength = sessionLength - 60;\n    if (newSessionLength > 0) {\n      setSessionLength(newSessionLength);\n    }\n\n  };\n\n  const addSessionMinute = () => {\n    const newSessionLength = sessionLength + 60;\n    if (newSessionLength <= 60 * 60) {\n      setSessionLength(sessionLength + 60);\n    }\n  };\n  useEffect(() => {\n    setTimeLeft(sessionLength);\n  }, [sessionLength]);\n\n  const started = intervalCount != null;\n  const startStopTime = () => {\n    if (started) {\n      clearInterval(intervalCount);\n      setIntervalCount(null);\n    } else {\n      const newIntervalCount = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          const newTimeLeft = prevTimeLeft - 1;\n          if (newTimeLeft >= 0) {\n            return prevTimeLeft - 1\n          }\n          beepElement.current.play();\n          if (sessionType === \"Session\") {\n            setSessionType('Break');\n            return breakLength;\n          } else if (sessionType === 'Break') {\n            setSessionType('Session');\n            return sessionLength;\n          }\n        })\n      }, 1000);\n      setIntervalCount(newIntervalCount)\n    }\n  };\n\n\n  const handleReset = () => {\n    clearInterval(intervalCount)\n    setIntervalCount(null)\n    setSessionType('Session')\n    setSessionLength(25 * 60)\n    setBreakLength(5 * 60)\n    setTimeLeft(25 * 60)\n    beepElement.current.load()\n  }\n  return (\n    <div className=\"App\">\n      {/*- Add Timer Display*/}\n      <TimeDisplay\n        sessionLength={sessionLength}\n        breakLength={breakLength}\n        sessionType={sessionType}\n        startStopTime={startStopTime}\n        handleReset={handleReset}\n        timeLeft={timeLeft}\n        started={started}\n      />\n      {/*+ change TimeDisplay whenever session length changes (useEffect - called whenever a variable changes)*/}\n      {/*+ Add countdown ( setInterval() )*/}\n      {/*+ Stop Countdown ( clearInterval() ), intervalId -*/}\n      { /*- Add Session Timer*/ }\n      <SessionTimer\n        sessionLength={sessionLength}\n        addMinute={addSessionMinute}\n        minusMinute={minusSessionMinute}\n      />\n      {/*- Add break Timer*/}\n      <BreakTimer\n        breakLength={breakLength}\n        addMinute={addBreakMinute}\n        minusMinute={minusBreakMinute}\n      />\n      <audio ref={beepElement} id=\"beep\">\n        <source src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\" type=\"audio/mpeg\"/>\n      </audio>\n\n      {/*- Add time complete alert  - Add audio alert and play it (useRef)*/}\n      {/*- Switch from Session to Break and visa versa (track session type) - set time left to break/session length*/}\n      {/*- Add Reset Button*/}\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}